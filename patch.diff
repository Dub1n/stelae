--- a/bridge/stream_http_bridge.py
+++ b/bridge/stream_http_bridge.py
@@ -1,9 +1,14 @@
-import os
+import os
+import json
+import logging
 from fastapi import FastAPI, Request, Response
-from fastapi.responses import JSONResponse, StreamingResponse
+from fastapi.responses import JSONResponse, StreamingResponse
 import asyncio
 import time
-import httpx
+import httpx
+
+# logger for bridge diagnostics
+logger = logging.getLogger("bridge")
+logger.setLevel(logging.INFO)
 
 app = FastAPI()
 
@@ -18,9 +23,44 @@
 # Environment configuration
-UPSTREAM_BASE = os.environ.get("UPSTREAM_BASE", "http://127.0.0.1:9092")
-UPSTREAM_POST_PATH = os.environ.get("UPSTREAM_POST_PATH", "/mcp")
+UPSTREAM_BASE = os.environ.get("UPSTREAM_BASE", "http://127.0.0.1:9092")
+# allow None -> probe at startup; previously defaulted to "/mcp"
+UPSTREAM_POST_PATH = os.environ.get("UPSTREAM_POST_PATH")
+PATH_CANDIDATES = [
+    p.strip()
+    for p in os.environ.get("UPSTREAM_PATH_CANDIDATES", "/mcp,/mem").split(",")
+    if p.strip()
+]
+PROBE_TIMEOUT = float(os.environ.get("UPSTREAM_PROBE_TIMEOUT", "2.5"))
+
+def _probe_upstream_path() -> str | None:
+    """
+    Try candidate JSON-RPC endpoints on UPSTREAM_BASE and return the first 2xx.
+    Caches choice by setting module-level UPSTREAM_POST_PATH.
+    """
+    payload = {
+        "jsonrpc": "2.0",
+        "id": "probe",
+        "method": "initialize",
+        "params": {"protocolVersion": "2024-11-05"},
+    }
+    for path in PATH_CANDIDATES:
+        url = f"{UPSTREAM_BASE}{path}"
+        try:
+            r = httpx.post(url, json=payload, timeout=PROBE_TIMEOUT)
+            if 200 <= r.status_code < 300:
+                logger.info(f"[bridge] upstream path OK: {path} ({r.status_code})")
+                return path
+            logger.info(f"[bridge] upstream path {path} returned {r.status_code}")
+        except Exception as e:
+            logger.info(f"[bridge] upstream path {path} probe failed: {e}")
+    return None
+
+# Choose path at import time if not provided via env
+if not UPSTREAM_POST_PATH:
+    chosen = _probe_upstream_path()
+    UPSTREAM_POST_PATH = chosen or "/mcp"
+    logger.info(f"[bridge] using UPSTREAM_POST_PATH={UPSTREAM_POST_PATH}")
 
 PUBLIC_BASE_URL = os.environ.get("PUBLIC_BASE_URL", "https://mcp.example.com")
 KEEPALIVE_INTERVAL = int(os.environ.get("KEEPALIVE_INTERVAL", "10"))
 
@@ -112,7 +152,7 @@
 async def post_mcp(request: Request):
     """
     Forward JSON-RPC POST to upstream single endpoint.
-    """
+    """
     try:
         body = await request.body()
         # Pass through JSON; add minimal headers
@@ -121,7 +161,9 @@
         )
-        upstream_url = f"{UPSTREAM_BASE}{UPSTREAM_POST_PATH}"
+        upstream_url = f"{UPSTREAM_BASE}{UPSTREAM_POST_PATH}"
         async with httpx.AsyncClient() as client:
             resp = await client.post(upstream_url, content=body, headers=headers)
         if 200 <= resp.status_code < 300:
             return Response(content=resp.content, status_code=resp.status_code, media_type="application/json")
-        return JSONResponse({"upstream": resp.status_code, "body": resp.text}, status_code=502)
+        # surface upstream details for fast triage
+        return JSONResponse({"upstream": resp.status_code, "body": resp.text}, status_code=502, headers={
+            "X-Bridge-Upstream-Path": UPSTREAM_POST_PATH, "X-Bridge-Upstream-Status": str(resp.status_code)})
     except Exception as e:
-        return JSONResponse({"error": f"upstream post failed: {e}"}, status_code=502)
+        return JSONResponse({"error": f"upstream post failed: {e}"}, status_code=502, headers={"X-Bridge-Upstream-Path": UPSTREAM_POST_PATH})
