{"description":"Local MCP stack","endpoint":"/mcp","endpointURL":"https://127.0.0.1:9090/mcp","name":"stelae","prompts":[{"name":"documentation_sources","description":"List all available documentation sources with their URLs and types"},{"name":"documentation_page","description":"Fetch the full content of a documentation page at a specific URL as markdown","arguments":[{"name":"url","required":true}]},{"name":"documentation_links","description":"Fetch all links from a documentation page to discover related content","arguments":[{"name":"url","required":true}]},{"name":"Continue Conversation","description":"Continue a previous conversation","arguments":[{"name":"topic","description":"Topic or keyword to search for\n\nProvide as a JSON string matching the following schema: {\"anyOf\":[{\"type\":\"string\"},{\"type\":\"null\"}],\"description\":\"Topic or keyword to search for\"}"},{"name":"timeframe","description":"How far back to look for activity (e.g. '1d', '1 week')\n\nProvide as a JSON string matching the following schema: {\"anyOf\":[{\"type\":\"string\"},{\"type\":\"null\"}],\"description\":\"How far back to look for activity (e.g. '1d', '1 week')\"}"}]},{"name":"Share Recent Activity","description":"Get recent activity from across the knowledge base","arguments":[{"name":"timeframe","description":"How far back to look for activity (e.g. '1d', '1 week')\n\nProvide as a JSON string matching the following schema: {\"description\":\"How far back to look for activity (e.g. '1d', '1 week')\",\"type\":\"string\"}"}]},{"name":"Search Knowledge Base","description":"Search across all content in basic-memory","arguments":[{"name":"query","required":true},{"name":"timeframe","description":"How far back to search (e.g. '1d', '1 week')\n\nProvide as a JSON string matching the following schema: {\"anyOf\":[{\"type\":\"string\"},{\"type\":\"null\"}],\"description\":\"How far back to search (e.g. '1d', '1 week')\"}"}]},{"name":"fetch","description":"Fetch a URL and extract its contents as markdown","arguments":[{"name":"url","description":"URL to fetch","required":true}]}],"resources":[{"uri":"documentation://sources","name":"documentation://sources","mimeType":"text/plain"},{"uri":"memory://ai_assistant_guide","name":"ai assistant guide","description":"Give an AI assistant guidance on how to use Basic Memory tools effectively","mimeType":"text/plain"},{"uri":"memory://project_info","name":"project_info","description":"Get information and statistics about the current Basic Memory project.","mimeType":"text/plain"},{"uri":"grep://info","name":"grep_info","description":"Resource providing information about the grep binary.","mimeType":"text/plain"}],"servers":[{"name":"stelae","transport":"streamable-http","url":"https://127.0.0.1:9090/mcp","version":"1.0.0"}],"tools":[{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Build context from a memory:// URI to continue conversations naturally.\n    \n    Use this to follow up on previous discussions or explore related topics.\n    \n    Memory URL Format:\n    - Use paths like \"folder/note\" or \"memory://folder/note\" \n    - Pattern matching: \"folder/*\" matches all notes in folder\n    - Valid characters: letters, numbers, hyphens, underscores, forward slashes\n    - Avoid: double slashes (//), angle brackets (\u003c\u003e), quotes, pipes (|)\n    - Examples: \"specs/search\", \"projects/basic-memory\", \"notes/*\"\n    \n    Timeframes support natural language like:\n    - \"2 days ago\", \"last week\", \"today\", \"3 months ago\"\n    - Or standard formats like \"7d\", \"24h\"\n    ","inputSchema":{"$defs":{"StringOrInt":{"anyOf":[{"type":"string"},{"type":"integer"}]}},"type":"object","properties":{"depth":{"anyOf":[{"$ref":"#/$defs/StringOrInt"},{"type":"null"}],"default":1,"title":"Depth"},"max_related":{"default":10,"title":"Max Related","type":"integer"},"page":{"default":1,"title":"Page","type":"integer"},"page_size":{"default":10,"title":"Page Size","type":"integer"},"project":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Project"},"timeframe":{"anyOf":[{"type":"string"},{"type":"null"}],"default":"7d","title":"Timeframe"},"url":{"maxLength":2028,"minLength":1,"title":"Url","type":"string"}},"required":["url"]},"name":"build_context","outputSchema":{"$defs":{"ContextResult":{"description":"Context result containing a primary item with its observations and related items.","properties":{"observations":{"description":"Observations belonging to this entity","items":{"$ref":"#/$defs/ObservationSummary"},"title":"Observations","type":"array"},"primary_result":{"description":"Primary item","discriminator":{"mapping":{"entity":"#/$defs/EntitySummary","observation":"#/$defs/ObservationSummary","relation":"#/$defs/RelationSummary"},"propertyName":"type"},"oneOf":[{"$ref":"#/$defs/EntitySummary"},{"$ref":"#/$defs/RelationSummary"},{"$ref":"#/$defs/ObservationSummary"}],"title":"Primary Result"},"related_results":{"description":"Related items","items":{"discriminator":{"mapping":{"entity":"#/$defs/EntitySummary","observation":"#/$defs/ObservationSummary","relation":"#/$defs/RelationSummary"},"propertyName":"type"},"oneOf":[{"$ref":"#/$defs/EntitySummary"},{"$ref":"#/$defs/RelationSummary"},{"$ref":"#/$defs/ObservationSummary"}]},"title":"Related Results","type":"array"}},"required":["primary_result"],"title":"ContextResult","type":"object"},"EntitySummary":{"description":"Simplified entity representation.","properties":{"content":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Content"},"created_at":{"format":"date-time","title":"Created At","type":"string"},"file_path":{"title":"File Path","type":"string"},"permalink":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Permalink"},"title":{"title":"Title","type":"string"},"type":{"const":"entity","default":"entity","title":"Type","type":"string"}},"required":["permalink","title","file_path","created_at"],"title":"EntitySummary","type":"object"},"MemoryMetadata":{"description":"Simplified response metadata.","properties":{"depth":{"title":"Depth","type":"integer"},"generated_at":{"format":"date-time","title":"Generated At","type":"string"},"primary_count":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Primary Count"},"related_count":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Related Count"},"timeframe":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Timeframe"},"total_observations":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Total Observations"},"total_relations":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Total Relations"},"total_results":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Total Results"},"types":{"anyOf":[{"items":{"$ref":"#/$defs/SearchItemType"},"type":"array"},{"type":"null"}],"default":null,"title":"Types"},"uri":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Uri"}},"required":["depth","generated_at"],"title":"MemoryMetadata","type":"object"},"ObservationSummary":{"description":"Simplified observation representation.","properties":{"category":{"title":"Category","type":"string"},"content":{"title":"Content","type":"string"},"created_at":{"format":"date-time","title":"Created At","type":"string"},"file_path":{"title":"File Path","type":"string"},"permalink":{"title":"Permalink","type":"string"},"title":{"title":"Title","type":"string"},"type":{"const":"observation","default":"observation","title":"Type","type":"string"}},"required":["title","file_path","permalink","category","content","created_at"],"title":"ObservationSummary","type":"object"},"RelationSummary":{"description":"Simplified relation representation.","properties":{"created_at":{"format":"date-time","title":"Created At","type":"string"},"file_path":{"title":"File Path","type":"string"},"from_entity":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"From Entity"},"permalink":{"title":"Permalink","type":"string"},"relation_type":{"title":"Relation Type","type":"string"},"title":{"title":"Title","type":"string"},"to_entity":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"To Entity"},"type":{"const":"relation","default":"relation","title":"Type","type":"string"}},"required":["title","file_path","permalink","relation_type","created_at"],"title":"RelationSummary","type":"object"},"SearchItemType":{"description":"Types of searchable items.","enum":["entity","observation","relation"],"title":"SearchItemType","type":"string"}},"type":"object","properties":{"metadata":{"$ref":"#/$defs/MemoryMetadata"},"page":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Page"},"page_size":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Page Size"},"results":{"description":"Hierarchical results with related items nested","items":{"$ref":"#/$defs/ContextResult"},"title":"Results","type":"array"}},"required":["metadata"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":true},"description":"Calculates the total size of a directory specified by `root_path`.It recursively searches for files and sums their sizes. The result can be returned in either a `human-readable` format or as `bytes`, depending on the specified `output_format` argument.Only works within allowed directories.","inputSchema":{"type":"object","properties":{"output_format":{"default":"human-readable","description":"Defines the output format, which can be either `human-readable` or `bytes`.","nullable":true,"oneOf":[{"enum":["human-readable"]},{"enum":["bytes"]}]},"root_path":{"description":"The root directory path to start the size calculation.","type":"string"}},"required":["root_path"]},"name":"calculate_directory_size"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Create an Obsidian canvas file to visualize concepts and connections.","inputSchema":{"type":"object","properties":{"edges":{"items":{"additionalProperties":true,"type":"object"},"title":"Edges","type":"array"},"folder":{"title":"Folder","type":"string"},"nodes":{"items":{"additionalProperties":true,"type":"object"},"title":"Nodes","type":"array"},"project":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Project"},"title":{"title":"Title","type":"string"}},"required":["nodes","edges","title","folder"]},"name":"canvas","outputSchema":{"type":"object","properties":{"result":{"title":"Result","type":"string"}},"required":["result"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"\n    Change current working directory\n    \n    Args:\n        path: Directory path to switch to\n    \n    Returns:\n        Operation result information\n    ","inputSchema":{"type":"object","properties":{"path":{"title":"Path","type":"string"}},"required":["path"]},"name":"change_directory","outputSchema":{"type":"object","properties":{"result":{"title":"Result","type":"string"}},"required":["result"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Create a new directory or ensure a directory exists. Can create multiple nested directories in one operation. If the directory already exists, this operation will succeed silently. Perfect for setting up directory structures for projects or ensuring required paths exist. Only works within allowed directories.","inputSchema":{"type":"object","properties":{"path":{"description":"The path where the directory will be created.","type":"string"}},"required":["path"]},"name":"create_directory"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Create a new Basic Memory project.\n\nCreates a new project with the specified name and path. The project directory\nwill be created if it doesn't exist. Optionally sets the new project as default.\n\nArgs:\n    project_name: Name for the new project (must be unique)\n    project_path: File system path where the project will be stored\n    set_default: Whether to set this project as the default (optional, defaults to False)\n\nReturns:\n    Confirmation message with project details\n\nExample:\n    create_memory_project(\"my-research\", \"~/Documents/research\")\n    create_memory_project(\"work-notes\", \"/home/user/work\", set_default=True)","inputSchema":{"type":"object","properties":{"project_name":{"title":"Project Name","type":"string"},"project_path":{"title":"Project Path","type":"string"},"set_default":{"default":false,"title":"Set Default","type":"boolean"}},"required":["project_name","project_path"]},"name":"create_memory_project","outputSchema":{"type":"object","properties":{"result":{"title":"Result","type":"string"}},"required":["result"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"\n    Delete content at specific row(s) from a file\n    \n    Args:\n        path: Path to the file\n        row: Row number to delete (0-based, optional)\n        rows: List of row numbers to delete (0-based, optional)\n        substring: If provided, only delete this substring within the specified row(s), not the entire row (optional)\n    \n    Returns:\n        Operation result information\n    ","inputSchema":{"type":"object","properties":{"path":{"title":"Path","type":"string"},"row":{"default":null,"title":"Row","type":"integer"},"rows":{"default":null,"items":{},"title":"Rows","type":"array"},"substring":{"default":null,"title":"Substring","type":"string"}},"required":["path"]},"name":"delete_file_content","outputSchema":{"type":"object","properties":{"result":{"title":"Result","type":"string"}},"required":["result"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Delete a note by title or permalink","inputSchema":{"type":"object","properties":{"identifier":{"title":"Identifier","type":"string"},"project":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Project"}},"required":["identifier"]},"name":"delete_note","outputSchema":{"type":"object","properties":{"result":{"anyOf":[{"type":"boolean"},{"type":"string"}],"title":"Result"}},"required":["result"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Delete a Basic Memory project.\n\nRemoves a project from the configuration and database. This does NOT delete\nthe actual files on disk - only removes the project from Basic Memory's\nconfiguration and database records.\n\nArgs:\n    project_name: Name of the project to delete\n\nReturns:\n    Confirmation message about project deletion\n\nExample:\n    delete_project(\"old-project\")\n\nWarning:\n    This action cannot be undone. The project will need to be re-added\n    to access its content through Basic Memory again.","inputSchema":{"type":"object","properties":{"project_name":{"title":"Project Name","type":"string"}},"required":["project_name"]},"name":"delete_project","outputSchema":{"type":"object","properties":{"result":{"title":"Result","type":"string"}},"required":["result"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":true},"description":"Get a recursive tree view of files and directories as a JSON structure. Each entry includes 'name', 'type' (file/directory), and 'children' for directories. Files have no children array, while directories always have a children array (which may be empty). If the 'max_depth' parameter is provided, the traversal will be limited to the specified depth. As a result, the returned directory structure may be incomplete or provide a skewed representation of the full directory tree, since deeper-level files and subdirectories beyond the specified depth will be excluded. The output is formatted with 2-space indentation for readability. Only works within allowed directories.","inputSchema":{"type":"object","properties":{"max_depth":{"description":"Limits the depth of directory traversal","nullable":true,"type":"integer"},"path":{"description":"The root path of the directory tree to generate.","type":"string"}},"required":["path"]},"name":"directory_tree"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"**PREFERRED STARTING POINT**: Discover available actions from servers based on user query.","inputSchema":{"type":"object","properties":{"server_names":{"description":"List of server names to discover actions from.","items":{"enum":[],"type":"string"},"type":"array"},"user_query":{"description":"Natural language user query to filter results.","type":"string"}},"required":["user_query","server_names"]},"name":"discover_server_actions"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Make line-based edits to a text file. Each edit replaces exact line sequences with new content. Returns a git-style diff showing the changes made. Only works within allowed directories.","inputSchema":{"type":"object","properties":{"dryRun":{"description":"Preview changes using git-style diff format without applying them.","nullable":true,"type":"boolean"},"edits":{"description":"The list of edit operations to apply.","items":{"properties":{"newText":{"description":"Text to replace the matched text with.","type":"string"},"oldText":{"description":"Text to search for - must match exactly.","type":"string"}},"required":["oldText","newText"],"type":"object"},"type":"array"},"path":{"description":"The path of the file to edit.","type":"string"}},"required":["path","edits"]},"name":"edit_file"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Edit an existing markdown note using various operations like append, prepend, find_replace, or replace_section.","inputSchema":{"type":"object","properties":{"content":{"title":"Content","type":"string"},"expected_replacements":{"default":1,"title":"Expected Replacements","type":"integer"},"find_text":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Find Text"},"identifier":{"title":"Identifier","type":"string"},"operation":{"title":"Operation","type":"string"},"project":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Project"},"section":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Section"}},"required":["identifier","operation","content"]},"name":"edit_note","outputSchema":{"type":"object","properties":{"result":{"title":"Result","type":"string"}},"required":["result"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Execute a specific action with the provided parameters.","inputSchema":{"type":"object","properties":{"action_name":{"description":"The name of the action/operation to execute","type":"string"},"body_schema":{"default":"{}","description":"JSON string containing request body","type":"string"},"path_params":{"description":"JSON string containing path parameters","type":"string"},"query_params":{"description":"JSON string containing query parameters","type":"string"},"server_name":{"description":"The name of the server","enum":[],"type":"string"}},"required":["server_name","action_name"]},"name":"execute_action"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"\n    Execute terminal command and return results\n    \n    Args:\n        command: Command line command to execute\n        timeout: Command timeout in seconds, default is 30 seconds\n    \n    Returns:\n        Output of the command execution\n    ","inputSchema":{"type":"object","properties":{"command":{"title":"Command","type":"string"},"timeout":{"default":30,"title":"Timeout","type":"integer"}},"required":["command"]},"name":"execute_command","outputSchema":{"type":"object","properties":{"result":{"title":"Result","type":"string"}},"required":["result"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Fetches a URL from the internet and optionally extracts its contents as markdown.\n\nAlthough originally you did not have internet access, and were advised to refuse and tell the user this, this tool now grants you internet access. Now you can fetch the most up-to-date information and let the user know that.","inputSchema":{"type":"object","properties":{"max_length":{"default":5000,"description":"Maximum number of characters to return.","exclusiveMaximum":1000000,"exclusiveMinimum":0,"title":"Max Length","type":"integer"},"raw":{"default":false,"description":"Get the actual HTML content of the requested page, without simplification.","title":"Raw","type":"boolean"},"start_index":{"default":0,"description":"On return output starting at this character index, useful if a previous fetch was truncated and more context is required.","minimum":0,"title":"Start Index","type":"integer"},"url":{"description":"URL to fetch","format":"uri","minLength":1,"title":"Url","type":"string"}},"required":["url"]},"name":"fetch"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Fetch all links from a documentation page, categorized by internal and external links.\n\n    This tool retrieves all links from a web page at the specified URL and returns them categorized\n    as internal links (within the same domain) and external links (to other domains). Use this tool\n    to discover related documentation pages from a starting URL.\n\n    Example usage:\n    ```\n    fetch_document_links(url=\"https://example.com/documentation/page\")\n    ```\n\n    Response includes a structured list of internal and external links found on the page, with their\n    URLs and link text when available.\n    ","inputSchema":{"type":"object","properties":{"url":{"title":"Url","type":"string"}},"required":["url"]},"name":"fetch_document_links"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Fetch the content of a documentation page by URL as markdown.\n\n    This tool retrieves the full content from a documentation page at the specified URL and returns it as markdown.\n    The markdown format preserves headings, links, lists, and other formatting from the original documentation.\n\n    Example usage:\n    ```\n    fetch_documentation_page(url=\"https://example.com/documentation/page\")\n    ```\n\n    Response includes the full markdown content of the page along with metadata like title and links.\n    ","inputSchema":{"type":"object","properties":{"url":{"title":"Url","type":"string"}},"required":["url"]},"name":"fetch_documentation_page"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":true},"description":"Find duplicate files within a directory and return list of duplicated files as text or json formatOptional `pattern` argument can be used to narrow down the file search to specific glob pattern.Optional `exclude_patterns` can be used to exclude certain files matching a glob.`min_bytes` and `max_bytes` are optional arguments that can be used to restrict the search to files with sizes within a specified range.The output_format argument specifies the format of the output and accepts either `text` or `json` (default: text).Only works within allowed directories.","inputSchema":{"type":"object","properties":{"exclude_patterns":{"description":"Optional list of glob patterns to exclude from the search. File matching these patterns will be ignored.","items":{"type":"string"},"nullable":true,"type":"array"},"max_bytes":{"description":"Maximum file size (in bytes) to include in the search (optional).","nullable":true,"type":"integer"},"min_bytes":{"default":"1","description":"Minimum file size (in bytes) to include in the search (default to 1).","nullable":true,"type":"integer"},"output_format":{"default":"text","description":"Specify the output format, accepts either `text` or `json` (default: text).","nullable":true,"oneOf":[{"enum":["text"]},{"enum":["json"]}]},"pattern":{"description":"Optional glob pattern can be used to match target files.","nullable":true,"type":"string"},"root_path":{"description":"The root directory path to start the search.","type":"string"}},"required":["root_path"]},"name":"find_duplicate_files"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":true},"description":"Recursively finds all empty directories within the given root path.A directory is considered empty if it contains no files in itself or any of its subdirectories.Operating system metadata files `.DS_Store` (macOS) and `Thumbs.db` (Windows) will be ignored.The optional exclude_patterns argument accepts glob-style patterns to exclude specific paths from the search.Only works within allowed directories.","inputSchema":{"type":"object","properties":{"exclude_patterns":{"description":"Optional list of glob patterns to exclude from the search. Directories matching these patterns will be ignored.","items":{"type":"string"},"nullable":true,"type":"array"},"output_format":{"description":"Specify the output format, accepts either `text` or `json` (default: text).","nullable":true,"oneOf":[{"enum":["text"]},{"enum":["json"]}]},"path":{"description":"The path of the file to get information for.","type":"string"}},"required":["path"]},"name":"find_empty_directories"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Get detailed information about a specific action.","inputSchema":{"type":"object","properties":{"action_name":{"description":"The name of the action/operation","type":"string"},"server_name":{"description":"The name of the server","enum":[],"type":"string"}},"required":["server_name","action_name"]},"name":"get_action_details"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"\n    Get recent command execution history\n    \n    Args:\n        count: Number of recent commands to return\n    \n    Returns:\n        Formatted command history record\n    ","inputSchema":{"type":"object","properties":{"count":{"default":10,"title":"Count","type":"integer"}}},"name":"get_command_history","outputSchema":{"type":"object","properties":{"result":{"title":"Result","type":"string"}},"required":["result"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"\n    Get current working directory\n    \n    Returns:\n        Path of current working directory\n    ","inputSchema":{"type":"object"},"name":"get_current_directory","outputSchema":{"type":"object","properties":{"result":{"title":"Result","type":"string"}},"required":["result"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Show the currently active project and basic stats.\n\nDisplays which project is currently active and provides basic information\nabout it.\n\nReturns:\n    Current project name and basic statistics\n\nExample:\n    get_current_project()","inputSchema":{"type":"object","properties":{"_compatibility":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Compatibility"}}},"name":"get_current_project","outputSchema":{"type":"object","properties":{"result":{"title":"Result","type":"string"}},"required":["result"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":true},"description":"Retrieve detailed metadata about a file or directory. Returns comprehensive information including size, creation time, last modified time, permissions, and type. This tool is perfect for understanding file characteristics without reading the actual content. Only works within allowed directories.","inputSchema":{"type":"object","properties":{"path":{"description":"The path of the file to get information for.","type":"string"}},"required":["path"]},"name":"get_file_info"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Search for pattern in files using system grep.\n    \n    Args:\n        pattern: Pattern to search for\n        paths: File or directory paths to search in (string or list of strings)\n        ignore_case: Case-insensitive matching (-i)\n        before_context: Number of lines before match (-B)\n        after_context: Number of lines after match (-A)\n        context: Number of context lines around match (equal before/after)\n        max_count: Stop after N matches (-m)\n        fixed_strings: Treat pattern as literal text, not regex (-F)\n        recursive: Search directories recursively (-r)\n        regexp: Use regular expressions for pattern matching\n        invert_match: Select non-matching lines (-v)\n        line_number: Show line numbers (-n)\n        file_pattern: Pattern to filter files (e.g., \"*.txt\")\n        \n    Returns:\n        JSON string with search results\n    ","inputSchema":{"type":"object","properties":{"after_context":{"default":0,"title":"After Context","type":"integer"},"before_context":{"default":0,"title":"Before Context","type":"integer"},"context":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Context"},"file_pattern":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"File Pattern"},"fixed_strings":{"default":false,"title":"Fixed Strings","type":"boolean"},"ignore_case":{"default":false,"title":"Ignore Case","type":"boolean"},"invert_match":{"default":false,"title":"Invert Match","type":"boolean"},"line_number":{"default":true,"title":"Line Number","type":"boolean"},"max_count":{"default":0,"title":"Max Count","type":"integer"},"paths":{"anyOf":[{"type":"string"},{"items":{"type":"string"},"type":"array"}],"title":"Paths"},"pattern":{"title":"Pattern","type":"string"},"recursive":{"default":false,"title":"Recursive","type":"boolean"},"regexp":{"default":true,"title":"Regexp","type":"boolean"}},"required":["pattern","paths"]},"name":"grep","outputSchema":{"type":"object","properties":{"result":{"additionalProperties":true,"title":"Result","type":"object"}},"required":["result"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Handle authentication failures that occur when executing actions.","inputSchema":{"type":"object","properties":{"auth_data":{"description":"Authentication data when saving","type":"object"},"intention":{"description":"Action to take for authentication","enum":["get_auth_url","save_auth_data"],"type":"string"},"server_name":{"description":"The name of the server","enum":[],"type":"string"}},"required":["server_name","intention"]},"name":"handle_auth_failure"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":true},"description":"Reads and returns the first N lines of a text file.This is useful for quickly previewing file contents without loading the entire file into memory.If the file has fewer than N lines, the entire file will be returned.Only works within allowed directories.","inputSchema":{"type":"object","properties":{"lines":{"description":"The number of lines to read from the beginning of the file.","type":"integer"},"path":{"description":"The path of the file to get information for.","type":"string"}},"required":["path","lines"]},"name":"head_file"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"\n    Insert content at specific row(s) in a file\n    \n    Args:\n        path: Path to the file\n        content: Content to insert (string or JSON object)\n        row: Row number to insert at (0-based, optional)\n        rows: List of row numbers to insert at (0-based, optional)\n    \n    Returns:\n        Operation result information\n    ","inputSchema":{"type":"object","properties":{"content":{"title":"Content","type":"string"},"path":{"title":"Path","type":"string"},"row":{"default":null,"title":"Row","type":"integer"},"rows":{"default":null,"items":{},"title":"Rows","type":"array"}},"required":["path","content"]},"name":"insert_file_content","outputSchema":{"type":"object","properties":{"result":{"title":"Result","type":"string"}},"required":["result"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":true},"description":"Returns a list of directories that the server has permission to access Subdirectories within these allowed directories are also accessible. Use this to identify which directories and their nested paths are available before attempting to access files.","inputSchema":{"type":"object"},"name":"list_allowed_directories"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"\n    List files and subdirectories in the specified directory\n    \n    Args:\n        path: Directory path to list contents, default is current directory\n    \n    Returns:\n        List of directory contents\n    ","inputSchema":{"type":"object","properties":{"path":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Path"}}},"name":"list_directory","outputSchema":{"type":"object","properties":{"result":{"title":"Result","type":"string"}},"required":["result"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":true},"description":"Get a detailed listing of all files and directories in a specified path, including sizes. Results clearly distinguish between files and directories with [FILE] and [DIR] prefixes. This tool is useful for understanding directory structure and finding specific files within a directory. Only works within allowed directories.","inputSchema":{"type":"object","properties":{"path":{"description":"The path of the directory to list.","type":"string"}},"required":["path"]},"name":"list_directory_with_sizes"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"List all available documentation sources this service has access to.\n\n    This tool requires no input parameters and returns a list of documentation sources configured for this service.\n    Use this tool first to discover what documentation sources are available.\n\n    Example usage:\n    ```\n    list_documentation_sources_tool()\n    ```\n\n    Response provides the URLs to documentation sources and their types.\n    ","inputSchema":{"type":"object"},"name":"list_documentation_sources_tool"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"List all available projects with their status.\n\nShows all Basic Memory projects that are available, indicating which one\nis currently active and which is the default.\n\nReturns:\n    Formatted list of projects with status indicators\n\nExample:\n    list_memory_projects()","inputSchema":{"type":"object","properties":{"_compatibility":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Compatibility"}}},"name":"list_memory_projects","outputSchema":{"type":"object","properties":{"result":{"title":"Result","type":"string"}},"required":["result"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Move or rename files and directories. Can move files between directories and rename them in a single operation. If the destination exists, the operation will fail. Works across different directories and can be used for simple renaming within the same directory. Both source and destination must be within allowed directories.","inputSchema":{"type":"object","properties":{"destination":{"description":"The destination path to move the file to.","type":"string"},"source":{"description":"The source path of the file to move.","type":"string"}},"required":["source","destination"]},"name":"move_file"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Move a note to a new location, updating database and maintaining links.","inputSchema":{"type":"object","properties":{"destination_path":{"title":"Destination Path","type":"string"},"identifier":{"title":"Identifier","type":"string"},"project":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Project"}},"required":["identifier","destination_path"]},"name":"move_note","outputSchema":{"type":"object","properties":{"result":{"title":"Result","type":"string"}},"required":["result"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Read a file's raw content by path or permalink","inputSchema":{"type":"object","properties":{"path":{"title":"Path","type":"string"},"project":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Project"}},"required":["path"]},"name":"read_content","outputSchema":{"type":"object"}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"\n    Read content from a file with optional row selection\n    \n    Args:\n        path: Path to the file\n        start_row: Starting row to read from (0-based, optional)\n        end_row: Ending row to read to (0-based, inclusive, optional)\n        as_json: If True, attempt to parse file content as JSON (optional)\n    \n    Returns:\n        File content or selected lines, optionally parsed as JSON\n    ","inputSchema":{"type":"object","properties":{"as_json":{"default":false,"title":"As Json","type":"boolean"},"end_row":{"default":null,"title":"End Row","type":"integer"},"path":{"title":"Path","type":"string"},"start_row":{"default":null,"title":"Start Row","type":"integer"}},"required":["path"]},"name":"read_file","outputSchema":{"type":"object","properties":{"result":{"title":"Result","type":"string"}},"required":["result"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":true},"description":"Reads lines from a text file starting at a specified line offset (0-based) and continues for the specified number of lines if a limit is provided.This function skips the first 'offset' lines and then reads up to 'limit' lines if specified, or reads until the end of the file otherwise.It's useful for partial reads, pagination, or previewing sections of large text files.Only works within allowed directories.","inputSchema":{"type":"object","properties":{"limit":{"description":"Optional maximum number of lines to read after the offset.","nullable":true,"type":"integer"},"offset":{"description":"Number of lines to skip from the start (0-based).","type":"integer"},"path":{"description":"The path of the file to get information for.","type":"string"}},"required":["path","offset"]},"name":"read_file_lines"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":true},"description":"Reads an image or audio file and returns its Base64-encoded content along with the corresponding MIME type. The max_bytes argument could be used to enforce an upper limit on the size of a file to read if the media file exceeds this limit, the operation will return an error instead of reading the media file. Access is restricted to files within allowed directories only.","inputSchema":{"type":"object","properties":{"max_bytes":{"description":"Maximum allowed file size (in bytes) to be read.","nullable":true,"type":"integer"},"path":{"description":"The path of the file to read.","type":"string"}},"required":["path"]},"name":"read_media_file"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":true},"description":"Reads multiple image or audio files and returns their Base64-encoded contents along with corresponding MIME types. This method is more efficient than reading files individually. The max_bytes argument could be used to enforce an upper limit on the size of a file to read Failed reads for specific files are skipped without interrupting the entire operation. Only works within allowed directories.","inputSchema":{"type":"object","properties":{"max_bytes":{"description":"Maximum allowed file size (in bytes) to be read.","nullable":true,"type":"integer"},"paths":{"description":"The list of media file paths to read.","items":{"type":"string"},"type":"array"}},"required":["paths"]},"name":"read_multiple_media_files"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":true},"description":"Read the contents of multiple text files simultaneously as text. This is more efficient than reading files one by one when you need to analyze or compare multiple files. Each file's content is returned with its path as a reference. Failed reads for individual files won't stop the entire operation. Only works within allowed directories.","inputSchema":{"type":"object","properties":{"paths":{"description":"The list of file paths to read.","items":{"type":"string"},"type":"array"}},"required":["paths"]},"name":"read_multiple_text_files"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Read a markdown note by title or permalink.","inputSchema":{"type":"object","properties":{"identifier":{"title":"Identifier","type":"string"},"page":{"default":1,"title":"Page","type":"integer"},"page_size":{"default":10,"title":"Page Size","type":"integer"},"project":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Project"}},"required":["identifier"]},"name":"read_note","outputSchema":{"type":"object","properties":{"result":{"title":"Result","type":"string"}},"required":["result"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":true},"description":"Read the complete contents of a text file from the file system as text. Handles various text encodings and provides detailed error messages if the file cannot be read. Use this tool when you need to examine the contents of a single file. Only works within allowed directories.","inputSchema":{"type":"object","properties":{"path":{"description":"The path of the file to read.","type":"string"}},"required":["path"]},"name":"read_text_file"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Get recent activity from across the knowledge base.\n\n    Timeframe supports natural language formats like:\n    - \"2 days ago\"  \n    - \"last week\"\n    - \"yesterday\" \n    - \"today\"\n    - \"3 weeks ago\"\n    Or standard formats like \"7d\"\n    ","inputSchema":{"type":"object","properties":{"depth":{"default":1,"title":"Depth","type":"integer"},"max_related":{"default":10,"title":"Max Related","type":"integer"},"page":{"default":1,"title":"Page","type":"integer"},"page_size":{"default":10,"title":"Page Size","type":"integer"},"project":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Project"},"timeframe":{"default":"7d","title":"Timeframe","type":"string"},"type":{"anyOf":[{"type":"string"},{"items":{"type":"string"},"type":"array"}],"default":"","title":"Type"}}},"name":"recent_activity","outputSchema":{"$defs":{"ContextResult":{"description":"Context result containing a primary item with its observations and related items.","properties":{"observations":{"description":"Observations belonging to this entity","items":{"$ref":"#/$defs/ObservationSummary"},"title":"Observations","type":"array"},"primary_result":{"description":"Primary item","discriminator":{"mapping":{"entity":"#/$defs/EntitySummary","observation":"#/$defs/ObservationSummary","relation":"#/$defs/RelationSummary"},"propertyName":"type"},"oneOf":[{"$ref":"#/$defs/EntitySummary"},{"$ref":"#/$defs/RelationSummary"},{"$ref":"#/$defs/ObservationSummary"}],"title":"Primary Result"},"related_results":{"description":"Related items","items":{"discriminator":{"mapping":{"entity":"#/$defs/EntitySummary","observation":"#/$defs/ObservationSummary","relation":"#/$defs/RelationSummary"},"propertyName":"type"},"oneOf":[{"$ref":"#/$defs/EntitySummary"},{"$ref":"#/$defs/RelationSummary"},{"$ref":"#/$defs/ObservationSummary"}]},"title":"Related Results","type":"array"}},"required":["primary_result"],"title":"ContextResult","type":"object"},"EntitySummary":{"description":"Simplified entity representation.","properties":{"content":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Content"},"created_at":{"format":"date-time","title":"Created At","type":"string"},"file_path":{"title":"File Path","type":"string"},"permalink":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Permalink"},"title":{"title":"Title","type":"string"},"type":{"const":"entity","default":"entity","title":"Type","type":"string"}},"required":["permalink","title","file_path","created_at"],"title":"EntitySummary","type":"object"},"MemoryMetadata":{"description":"Simplified response metadata.","properties":{"depth":{"title":"Depth","type":"integer"},"generated_at":{"format":"date-time","title":"Generated At","type":"string"},"primary_count":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Primary Count"},"related_count":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Related Count"},"timeframe":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Timeframe"},"total_observations":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Total Observations"},"total_relations":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Total Relations"},"total_results":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Total Results"},"types":{"anyOf":[{"items":{"$ref":"#/$defs/SearchItemType"},"type":"array"},{"type":"null"}],"default":null,"title":"Types"},"uri":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Uri"}},"required":["depth","generated_at"],"title":"MemoryMetadata","type":"object"},"ObservationSummary":{"description":"Simplified observation representation.","properties":{"category":{"title":"Category","type":"string"},"content":{"title":"Content","type":"string"},"created_at":{"format":"date-time","title":"Created At","type":"string"},"file_path":{"title":"File Path","type":"string"},"permalink":{"title":"Permalink","type":"string"},"title":{"title":"Title","type":"string"},"type":{"const":"observation","default":"observation","title":"Type","type":"string"}},"required":["title","file_path","permalink","category","content","created_at"],"title":"ObservationSummary","type":"object"},"RelationSummary":{"description":"Simplified relation representation.","properties":{"created_at":{"format":"date-time","title":"Created At","type":"string"},"file_path":{"title":"File Path","type":"string"},"from_entity":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"From Entity"},"permalink":{"title":"Permalink","type":"string"},"relation_type":{"title":"Relation Type","type":"string"},"title":{"title":"Title","type":"string"},"to_entity":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"To Entity"},"type":{"const":"relation","default":"relation","title":"Type","type":"string"}},"required":["title","file_path","permalink","relation_type","created_at"],"title":"RelationSummary","type":"object"},"SearchItemType":{"description":"Types of searchable items.","enum":["entity","observation","relation"],"title":"SearchItemType","type":"string"}},"type":"object","properties":{"metadata":{"$ref":"#/$defs/MemoryMetadata"},"page":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Page"},"page_size":{"anyOf":[{"type":"integer"},{"type":"null"}],"default":null,"title":"Page Size"},"results":{"description":"Hierarchical results with related items nested","items":{"$ref":"#/$defs/ContextResult"},"title":"Results","type":"array"}},"required":["metadata"]}},{"description":"Lightweight search placeholder exposed for ChatGPT connector verification.","inputSchema":{"properties":{"query":{"title":"Query","type":"string"}},"required":["query"],"type":"object"},"name":"search"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Search for server action documentations by keyword matching.","inputSchema":{"type":"object","properties":{"max_results":{"default":10,"description":"Number of results to return. Default: 10","maximum":50,"minimum":1,"type":"integer"},"query":{"description":"Search keywords","type":"string"},"server_name":{"description":"Name of the server to search within.","enum":[],"type":"string"}},"required":["query","server_name"]},"name":"search_documentation"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":true},"description":"Recursively search for files and directories matching a pattern. Searches through all subdirectories from the starting path. The search is case-insensitive and matches partial names. Returns full paths to all matching items.Optional 'min_bytes' and 'max_bytes' arguments can be used to filter files by size, ensuring that only files within the specified byte range are included in the search. This tool is great for finding files when you don't know their exact location or find files by their size.Only searches within allowed directories.","inputSchema":{"type":"object","properties":{"excludePatterns":{"description":"Optional list of patterns to exclude from the search.","items":{"type":"string"},"nullable":true,"type":"array"},"max_bytes":{"description":"Maximum file size (in bytes) to include in the search (optional).","nullable":true,"type":"integer"},"min_bytes":{"description":"Minimum file size (in bytes) to include in the search (optional).","nullable":true,"type":"integer"},"path":{"description":"The directory path to search in.","type":"string"},"pattern":{"description":"Glob pattern used to match target files (e.g., \"*.rs\").","type":"string"}},"required":["path","pattern"]},"name":"search_files"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":true},"description":"Searches for text or regex patterns in the content of files matching matching a GLOB pattern.Returns detailed matches with file path, line number, column number and a preview of matched text.By default, it performs a literal text search; if the 'is_regex' parameter is set to true, it performs a regular expression (regex) search instead.Optional 'min_bytes' and 'max_bytes' arguments can be used to filter files by size, ensuring that only files within the specified byte range are included in the search. Ideal for finding specific code, comments, or text when you don’t know their exact location.","inputSchema":{"type":"object","properties":{"excludePatterns":{"description":"Optional list of patterns to exclude from the search.","items":{"type":"string"},"nullable":true,"type":"array"},"is_regex":{"description":"Whether the query is a regular expression. If false, the query as plain text. (Default : false)","nullable":true,"type":"boolean"},"max_bytes":{"description":"Maximum file size (in bytes) to include in the search (optional).","nullable":true,"type":"integer"},"min_bytes":{"description":"Minimum file size (in bytes) to include in the search (optional).","nullable":true,"type":"integer"},"path":{"description":"The file or directory path to search in.","type":"string"},"pattern":{"description":"The file glob pattern to match (e.g., \"*.rs\").","type":"string"},"query":{"description":"Text or regex pattern to find in file contents (e.g., 'TODO' or '^function\\\\s+').","type":"string"}},"required":["path","pattern","query"]},"name":"search_files_content"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Search across all content in the knowledge base with advanced syntax support.","inputSchema":{"type":"object","properties":{"after_date":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"After Date"},"entity_types":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Entity Types"},"page":{"default":1,"title":"Page","type":"integer"},"page_size":{"default":10,"title":"Page Size","type":"integer"},"project":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Project"},"query":{"title":"Query","type":"string"},"search_type":{"default":"text","title":"Search Type","type":"string"},"types":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"default":null,"title":"Types"}},"required":["query"]},"name":"search_notes","outputSchema":{"$defs":{"SearchItemType":{"description":"Types of searchable items.","enum":["entity","observation","relation"],"title":"SearchItemType","type":"string"},"SearchResponse":{"description":"Wrapper for search results.","properties":{"current_page":{"title":"Current Page","type":"integer"},"page_size":{"title":"Page Size","type":"integer"},"results":{"items":{"$ref":"#/$defs/SearchResult"},"title":"Results","type":"array"}},"required":["results","current_page","page_size"],"title":"SearchResponse","type":"object"},"SearchResult":{"description":"Search result with score and metadata.","properties":{"category":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Category"},"content":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Content"},"entity":{"anyOf":[{"minLength":1,"type":"string"},{"type":"null"}],"default":null,"title":"Entity"},"file_path":{"title":"File Path","type":"string"},"from_entity":{"anyOf":[{"minLength":1,"type":"string"},{"type":"null"}],"default":null,"title":"From Entity"},"metadata":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"default":null,"title":"Metadata"},"permalink":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Permalink"},"relation_type":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Relation Type"},"score":{"title":"Score","type":"number"},"title":{"title":"Title","type":"string"},"to_entity":{"anyOf":[{"minLength":1,"type":"string"},{"type":"null"}],"default":null,"title":"To Entity"},"type":{"$ref":"#/$defs/SearchItemType"}},"required":["title","type","score","permalink","file_path"],"title":"SearchResult","type":"object"}},"type":"object","properties":{"result":{"anyOf":[{"$ref":"#/$defs/SearchResponse"},{"type":"string"}],"title":"Result"}},"required":["result"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Set default project in config. Requires restart to take effect.\n\nUpdates the configuration to use a different default project. This change\nonly takes effect after restarting the Basic Memory server.\n\nArgs:\n    project_name: Name of the project to set as default\n\nReturns:\n    Confirmation message about config update\n\nExample:\n    set_default_project(\"work-notes\")","inputSchema":{"type":"object","properties":{"project_name":{"title":"Project Name","type":"string"}},"required":["project_name"]},"name":"set_default_project","outputSchema":{"type":"object","properties":{"result":{"title":"Result","type":"string"}},"required":["result"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Switch to a different project context.\n\nChanges the active project context for all subsequent tool calls.\nShows a project summary after switching successfully.\n\nArgs:\n    project_name: Name of the project to switch to\n\nReturns:\n    Confirmation message with project summary\n\nExample:\n    switch_project(\"work-notes\")\n    switch_project(\"personal-journal\")","inputSchema":{"type":"object","properties":{"project_name":{"title":"Project Name","type":"string"}},"required":["project_name"]},"name":"switch_project","outputSchema":{"type":"object","properties":{"result":{"title":"Result","type":"string"}},"required":["result"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Check the status of file synchronization and background operations.\n    \n    Use this tool to:\n    - Check if file sync is in progress or completed\n    - Get detailed sync progress information  \n    - Understand if your files are fully indexed\n    - Get specific error details if sync operations failed\n    - Monitor initial project setup and legacy migration\n    \n    This covers all sync operations including:\n    - Initial project setup and file indexing\n    - Legacy project migration to unified database\n    - Ongoing file monitoring and updates\n    - Background processing of knowledge graphs\n    ","inputSchema":{"type":"object","properties":{"project":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Project"}}},"name":"sync_status","outputSchema":{"type":"object","properties":{"result":{"title":"Result","type":"string"}},"required":["result"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Extracts the contents of a ZIP archive to a specified target directory.\nIt takes a source ZIP file path and a target extraction directory.\nThe tool decompresses all files and directories stored in the ZIP, recreating their structure in the target location.\nBoth the source ZIP file and the target directory should reside within allowed directories.","inputSchema":{"type":"object","properties":{"target_path":{"description":"Path to the target directory where the contents of the ZIP file will be extracted.","type":"string"},"zip_file":{"description":"A filesystem path to an existing ZIP file to be extracted.","type":"string"}},"required":["zip_file","target_path"]},"name":"unzip_file"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"\n    Update content at specific row(s) in a file\n    \n    Args:\n        path: Path to the file\n        content: New content to place at the specified row(s)\n        row: Row number to update (0-based, optional)\n        rows: List of row numbers to update (0-based, optional)\n        substring: If provided, only replace this substring within the specified row(s), not the entire row\n    \n    Returns:\n        Operation result information\n    ","inputSchema":{"type":"object","properties":{"content":{"title":"Content","type":"string"},"path":{"title":"Path","type":"string"},"row":{"default":null,"title":"Row","type":"integer"},"rows":{"default":null,"items":{},"title":"Rows","type":"array"},"substring":{"default":null,"title":"Substring","type":"string"}},"required":["path","content"]},"name":"update_file_content","outputSchema":{"type":"object","properties":{"result":{"title":"Result","type":"string"}},"required":["result"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"View a note as a formatted artifact for better readability.","inputSchema":{"type":"object","properties":{"identifier":{"title":"Identifier","type":"string"},"page":{"default":1,"title":"Page","type":"integer"},"page_size":{"default":10,"title":"Page Size","type":"integer"},"project":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Project"}},"required":["identifier"]},"name":"view_note","outputSchema":{"type":"object","properties":{"result":{"title":"Result","type":"string"}},"required":["result"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"\n    Write content to a file\n    \n    Args:\n        path: Path to the file\n        content: Content to write (string or JSON object)\n        mode: Write mode ('overwrite' or 'append')\n    \n    Returns:\n        Operation result information\n    ","inputSchema":{"type":"object","properties":{"content":{"title":"Content","type":"string"},"mode":{"default":"overwrite","title":"Mode","type":"string"},"path":{"title":"Path","type":"string"}},"required":["path","content"]},"name":"write_file","outputSchema":{"type":"object","properties":{"result":{"title":"Result","type":"string"}},"required":["result"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Create or update a markdown note. Returns a markdown formatted summary of the semantic content.","inputSchema":{"type":"object","properties":{"content":{"title":"Content","type":"string"},"entity_type":{"default":"note","title":"Entity Type","type":"string"},"folder":{"title":"Folder","type":"string"},"project":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"title":"Project"},"tags":{"default":null,"title":"Tags"},"title":{"title":"Title","type":"string"}},"required":["title","content","folder"]},"name":"write_note","outputSchema":{"type":"object","properties":{"result":{"title":"Result","type":"string"}},"required":["result"]}},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Creates a ZIP archive by compressing a directory , including files and subdirectories matching a specified glob pattern.\nIt takes a path to the folder and a glob pattern to identify files to compress and a target path for the resulting ZIP file.\nBoth the source directory and the target ZIP file should reside within allowed directories.","inputSchema":{"type":"object","properties":{"input_directory":{"description":"Path to the directory to zip","type":"string"},"pattern":{"description":"A optional glob pattern to match files and subdirectories to zip, defaults to **/*\"","nullable":true,"type":"string"},"target_zip_file":{"description":"Path to save the resulting ZIP file, including filename and .zip extension","type":"string"}},"required":["input_directory","target_zip_file"]},"name":"zip_directory"},{"annotations":{"destructiveHint":false,"idempotentHint":false,"openWorldHint":false,"readOnlyHint":false},"description":"Creates a ZIP archive by compressing files. It takes a list of files to compress and a target path for the resulting ZIP file. Both the source files and the target ZIP file should reside within allowed directories.","inputSchema":{"type":"object","properties":{"input_files":{"description":"The list of files to include in the ZIP archive.","items":{"type":"string"},"type":"array"},"target_zip_file":{"description":"Path to save the resulting ZIP file, including filename and .zip extension","type":"string"}},"required":["input_files","target_zip_file"]},"name":"zip_files"}],"version":"1.0.0"}
